Index: twin4build/saref4bldg/physical_object/building_object/building_device/distribution_device/distribution_flow_device/energy_conversion_device/air_to_air_heat_recovery/tests/test_air_to_air_heat_recovery_calibration.py
===================================================================
diff --git a/twin4build/saref4bldg/physical_object/building_object/building_device/distribution_device/distribution_flow_device/energy_conversion_device/air_to_air_heat_recovery/tests/test_air_to_air_heat_recovery_calibration.py b/twin4build/saref4bldg/physical_object/building_object/building_device/distribution_device/distribution_flow_device/energy_conversion_device/air_to_air_heat_recovery/tests/test_air_to_air_heat_recovery_calibration.py
deleted file mode 100644
--- a/twin4build/saref4bldg/physical_object/building_object/building_device/distribution_device/distribution_flow_device/energy_conversion_device/air_to_air_heat_recovery/tests/test_air_to_air_heat_recovery_calibration.py	(revision 5e9d98597fa20ff51db5017f1c122d049fc13c8b)
+++ /dev/null	(revision 5e9d98597fa20ff51db5017f1c122d049fc13c8b)
@@ -1,191 +0,0 @@
-import os
-import sys
-import datetime
-from dateutil.tz import tzutc
-import pandas as pd
-import matplotlib.pyplot as plt
-import json
-import numpy as np
-import seaborn as sns
-from matplotlib.dates import MonthLocator, DateFormatter
-from matplotlib.ticker import FuncFormatter
-###Only for testing before distributing package
-if __name__ == '__main__':
-    uppath = lambda _path,n: os.sep.join(_path.split(os.sep)[:-n])
-    #change the number here according to your requirement
-    #desired path looks like this "D:\Projects\Twin4Build
-    file_path = uppath(os.path.abspath(__file__), 11)
-    print(file_path)
-    sys.path.append(file_path)
-
-from twin4build.utils.data_loaders.load_spreadsheet import load_spreadsheet
-from twin4build.utils.preprocessing.data_collection import DataCollection
-from twin4build.utils.preprocessing.data_sampler import data_sampler
-from twin4build.saref4bldg.physical_object.building_object.building_device.distribution_device.distribution_flow_device.energy_conversion_device.air_to_air_heat_recovery.air_to_air_heat_recovery_system import AirToAirHeatRecoverySystem
-from twin4build.saref.measurement.measurement import Measurement
-
-from twin4build.logger.Logging import Logging
-
-logger = Logging.get_logger("ai_logfile")
-logger.info("[Test Air to Air Heat Recovery Calibration]")
-logger.disabled = True
-def test():
-    '''
-         It is a self-contained block of code that performs various tasks such as loading data from files,
-        creating instances of a AirToAirHeatRecoverySystem class, and plotting graphs using the Seaborn library.
-    '''
-    air_to_air_heat_recovery = AirToAirHeatRecoverySystem(
-                specificHeatCapacityAir = Measurement(hasValue=1000),
-                eps_75_h = 0.8,
-                eps_75_c = 0.8,
-                eps_100_h = 0.8,
-                eps_100_c = 0.8,
-                primaryAirFlowRateMax = Measurement(hasValue=35000/3600*1.225),
-                secondaryAirFlowRateMax = Measurement(hasValue=35000/3600*1.225),
-                subSystemOf = [],
-                input = {},
-                output = {},
-                savedInput = {},
-                savedOutput = {},
-                saveSimulationResult = True,
-                connectedThrough = [],
-                connectsAt = [],
-                id = "AirToAirHeatRecovery")
-    
-    logger.info("Entered in Test Function")
-
-    
-    colors = sns.color_palette("deep")
-    blue = colors[0]
-    orange = colors[1]
-    green = colors[2]
-    red = colors[3]
-    purple = colors[4]
-    brown = colors[5]
-    pink = colors[6]
-    grey = colors[7]
-    beis = colors[8]
-    sky_blue = colors[9]
-
-    input = pd.DataFrame()
-
-    stepSize = 600
-    startTime = datetime.datetime(year=2021, month=10, day=1, hour=0, minute=0, second=0, tzinfo=tzutc()) 
-    endTime = datetime.datetime(year=2023, month=1, day=1, hour=0, minute=0, second=0, tzinfo=tzutc())
-    format = "%m/%d/%Y %I:%M:%S %p"
-
-    filename = os.path.join(os.path.abspath(uppath(os.path.abspath(__file__), 10)), "test", "data", "time_series_data", "weather_BMS.csv")
-    weather = load_spreadsheet(filename=filename, stepSize=stepSize, start_time=startTime, end_time=endTime, format=format, dt_limit=9999)
-    temp = weather.copy()
-    # weather["outdoorTemperature"] = (weather["outdoorTemperature"]-32)*5/9 #convert from fahrenheit to celcius
-
-    filename = os.path.join(os.path.abspath(uppath(os.path.abspath(__file__), 10)), "test", "data", "time_series_data", "VE02_efficiency.csv")
-    VE02_efficiency = load_spreadsheet(filename=filename, stepSize=stepSize, start_time=startTime, end_time=endTime, format=format, dt_limit=9999)
-
-    filename = os.path.join(os.path.abspath(uppath(os.path.abspath(__file__), 10)), "test", "data", "time_series_data", "VE02_airflowrate_supply_kg_s.csv")
-    VE02_primaryAirFlowRate = load_spreadsheet(filename=filename, stepSize=stepSize, start_time=startTime, end_time=endTime, format=format, dt_limit=9999)
-    # VE02_primaryAirFlowRate["primaryAirFlowRate"] = VE02_primaryAirFlowRate["primaryAirFlowRate"]*0.0283168466/60*1.225 #convert from cubic feet per minute to kg/s
-
-    filename = os.path.join(os.path.abspath(uppath(os.path.abspath(__file__), 10)), "test", "data", "time_series_data", "VE02_airflowrate_return_kg_s.csv")
-    VE02_secondaryAirFlowRate = load_spreadsheet(filename=filename, stepSize=stepSize, start_time=startTime, end_time=endTime, format=format, dt_limit=9999)
-    # VE02_secondaryAirFlowRate["secondaryAirFlowRate"] = VE02_secondaryAirFlowRate["secondaryAirFlowRate"]*0.0283168466/60*1.225 #convert from cubic feet per minute to kg/s
-
-    filename = os.path.join(os.path.abspath(uppath(os.path.abspath(__file__), 10)), "test", "data", "time_series_data", "VE02_FTU1.csv")
-    VE02_FTU1 = load_spreadsheet(filename=filename, stepSize=stepSize, start_time=startTime, end_time=endTime, format=format, dt_limit=9999)
-    # VE02_FTU1["FTU1"] = (VE02_FTU1["FTU1"]-32)*5/9 #convert from fahrenheit to celcius
-
-    filename = os.path.join(os.path.abspath(uppath(os.path.abspath(__file__), 10)), "test", "data", "time_series_data", "VE02_FTG_MIDDEL.csv")
-    VE02_FTG_MIDDEL = load_spreadsheet(filename=filename, stepSize=stepSize, start_time=startTime, end_time=endTime, format=format, dt_limit=9999)
-    # VE02_FTG_MIDDEL["FTG_MIDDEL"] = (VE02_FTG_MIDDEL["FTG_MIDDEL"]-32)*5/9 #convert from fahrenheit to celcius
-
-    filename = os.path.join(os.path.abspath(uppath(os.path.abspath(__file__), 10)), "test", "data", "time_series_data", "VE02_FTI_KALK_SV.csv")
-    VE02_FTI_KALK_SV = load_spreadsheet(filename=filename, stepSize=stepSize, start_time=startTime, end_time=endTime, format=format, dt_limit=9999)
-    # VE02_FTI_KALK_SV["FTI_KALK_SV"] = (VE02_FTI_KALK_SV["FTI_KALK_SV"]-32)*5/9 #convert from fahrenheit to celcius
-
-    
-    
-    # primaryTemperatureIn can be calculated based on logged efficiency and temperature measurements.
-    # However, primaryTemperatureIn should also be equal to outdoor temperature, which is available.
-    # Outdoor temperature is therefore currently used. 
-    primaryTemperatureIn = (VE02_efficiency["efficiency"]/100*VE02_FTU1["FTU1"]-VE02_FTG_MIDDEL["FTG_MIDDEL"])/(VE02_efficiency["efficiency"]/100-1)
-
-
-
-
-    input.insert(0, "time", VE02_FTI_KALK_SV["Time stamp"])
-    input.insert(0, "primaryAirFlowRate", VE02_primaryAirFlowRate["primaryAirFlowRate"])
-    input.insert(0, "secondaryAirFlowRate", VE02_secondaryAirFlowRate["secondaryAirFlowRate"])
-    # input.insert(0, "primaryTemperatureIn", primaryTemperatureIn)
-    input.insert(0, "primaryTemperatureIn", weather["outdoorTemperature"])
-    input.insert(0, "secondaryTemperatureIn", VE02_FTU1["FTU1"])
-    input.insert(0, "primaryTemperatureOutSetpoint", VE02_FTI_KALK_SV["FTI_KALK_SV"])
-    input.insert(0, "primaryTemperatureOut", VE02_FTG_MIDDEL["FTG_MIDDEL"])
-
-    axes = input.iloc[20000:21000,:].drop(columns=["primaryTemperatureOutSetpoint"]).set_index("time").plot(subplots=True)
-    for a in axes:
-        a.legend(loc='best', prop={'size': 15})
-    plt.show()
-
-
-    #Remove commissioning period 
-    remove_start_date = "2022-10-23 00:00:00+00:00"
-    remove_end_date = "2022-11-06 00:00:00+00:00"
-    input[(input["time"]>=remove_start_date) & (input["time"]<remove_end_date)] = np.nan
-    #Remove scenario period
-    remove_start_date = "2022-01-03 00:00:00+00:00"
-    remove_end_date = "2022-01-17 00:00:00+00:00"
-    input[(input["time"]>=remove_start_date) & (input["time"]<remove_end_date)] = np.nan
-
-    
-
-    tol = 1e-5
-    input_plot = input.iloc[20000:21000,:].reset_index(drop=True)
-    output_plot = input_plot["primaryTemperatureOut"].to_numpy()
-
-
-
-    input.replace([np.inf, -np.inf], np.nan, inplace=True)
-    input = (input.loc[(input["primaryAirFlowRate"]>tol) | (input["secondaryAirFlowRate"]>tol)]).dropna().reset_index(drop=True) # Filter data to remove 0 airflow data
-    output = input["primaryTemperatureOut"].to_numpy()
-    input.drop(columns=["primaryTemperatureOut"])
-
-
-
-    start_pred = air_to_air_heat_recovery.do_period(input_plot) ####
-    print("Before")
-    print(f"MSE: {np.nanmean((start_pred-output_plot)**2)}")
-    fig, ax = plt.subplots()
-    ax.plot(input_plot["time"], start_pred, color=blue, label="Before calibration")
-    ax.plot(input_plot["time"], output_plot, color="black", label="Measured")
-    
-    
-    air_to_air_heat_recovery.calibrate(input=input, output=output)
-    end_pred = air_to_air_heat_recovery.do_period(input_plot)
-    print("After")
-    print(f"MSE: {np.nanmean((end_pred-output_plot)**2)}")
-
-
-    ax.plot(input_plot["time"], end_pred, color=red, linestyle="dashed", label="After calibration")
-    fig.legend(prop={'size': 15})
-    ax.set_ylim([18,22])
-
-
-    dayfmt = DateFormatter("%d")
-    monthfmt = DateFormatter("%b")
-    yearfmt = DateFormatter("%Y")
-
-    def combinedfmt(x,pos):
-        string = dayfmt(x)
-        if string == "17":
-            string += "\n" + monthfmt(x) + "\n" + yearfmt(x)
-        return string
-
-    # ax.xaxis.set_major_locator(MonthLocator((1,4,7,10)))
-    ax.xaxis.set_major_formatter(FuncFormatter(combinedfmt))
-    plt.show()
-
-    logger.info("Exited from Test Function")
-
-
-if __name__ == '__main__':
-    test()
Index: twin4build/saref4bldg/physical_object/building_object/building_device/distribution_device/distribution_flow_device/energy_conversion_device/coil/coil_DryCoilDiscretizedEthyleneGlycolWater30Percent_wbypass_FMUmodel.py
===================================================================
diff --git a/twin4build/saref4bldg/physical_object/building_object/building_device/distribution_device/distribution_flow_device/energy_conversion_device/coil/coil_DryCoilDiscretizedEthyleneGlycolWater30Percent_wbypass_FMUmodel.py b/twin4build/saref4bldg/physical_object/building_object/building_device/distribution_device/distribution_flow_device/energy_conversion_device/coil/coil_DryCoilDiscretizedEthyleneGlycolWater30Percent_wbypass_FMUmodel.py
deleted file mode 100644
--- a/twin4build/saref4bldg/physical_object/building_object/building_device/distribution_device/distribution_flow_device/energy_conversion_device/coil/coil_DryCoilDiscretizedEthyleneGlycolWater30Percent_wbypass_FMUmodel.py	(revision 5e9d98597fa20ff51db5017f1c122d049fc13c8b)
+++ /dev/null	(revision 5e9d98597fa20ff51db5017f1c122d049fc13c8b)
@@ -1,181 +0,0 @@
-from .coil import Coil
-from typing import Union
-import twin4build.saref.measurement.measurement as measurement
-from twin4build.utils.fmu.fmu_component import FMUComponent, unzip_fmu
-from twin4build.utils.constants import Constants
-from twin4build.utils.uppath import uppath
-from scipy.optimize import least_squares
-import numpy as np
-import os
-import sys
-from twin4build.saref.property_.temperature.temperature import Temperature
-from twin4build.saref.property_.flow.flow import Flow
-from twin4build.utils.fmu.unit_converters.functions import to_degC_from_degK, to_degK_from_degC, do_nothing, regularize
-from twin4build.utils.signature_pattern.signature_pattern import SignaturePattern, Node, Exact, IgnoreIntermediateNodes
-from twin4build.saref4bldg.physical_object.building_object.building_device.distribution_device.distribution_flow_device.energy_conversion_device.coil.coil import Coil
-# import twin4build as tb
-import twin4build.base as base
-
-def get_signature_pattern():
-
-    sp = SignaturePattern(ownedBy="CoilPumpValveFMUSystem")
-
-    node0 = Node(cls=base.Meter, id="<n<SUB>1</SUB>(Meter)>")
-    node1 = Node(cls=base.Coil, id="<n<SUB>2</SUB>(Coil)>")
-    node2 = Node(cls=base.Pump, id="<n<SUB>3</SUB>(Pump)>")
-    node3 = Node(cls=base.Valve, id="<n<SUB>4</SUB>(Valve)>")
-    node4 = Node(cls=base.Valve, id="<n<SUB>5</SUB>(Valve)>")
-    node5 = Node(cls=base.OpeningPosition, id="<n<SUB>5</SUB>(OpeningPosition)>")
-    node6 = Node(cls=base.Controller, id="<n<SUB>6</SUB>(Controller)>")
-    node7 = Node(cls=base.Sensor, id="<n<SUB>7</SUB>(Sensor)>")
-    node8 = Node(cls=(base.Fan, base.AirToAirHeatRecovery, base.Coil), id="<n<SUB>8</SUB>(Fan|AirToAirHeatRecovery|Coil)>")
-    
-
-    sp.add_edge(IgnoreIntermediateNodes(object=node0, subject=node1, predicate="connectedBefore"))
-    sp.add_edge(Exact(object=node1, subject=node3, predicate="connectedBefore"))
-    sp.add_edge(Exact(object=node3, subject=node2, predicate="connectedBefore"))
-    sp.add_edge(Exact(object=node1, subject=node4, predicate="connectedBefore"))
-    sp.add_edge(Exact(object=node4, subject=node5, predicate="hasProperty"))
-    sp.add_edge(Exact(object=node6, subject=node5, predicate="controls"))
-    sp.add_edge(IgnoreIntermediateNodes(object=node2, subject=node1, predicate="connectedBefore"))
-    sp.add_edge(IgnoreIntermediateNodes(object=node7, subject=node2, predicate="connectedBefore"))
-    sp.add_edge(IgnoreIntermediateNodes(object=node8, subject=node1, predicate="connectedBefore"))
-
-    sp.add_input("airFlowRate", node0)
-    sp.add_input("inletAirTemperature", node8, ("outletAirTemperature", "primaryTemperatureOut", "outletAirTemperature"))
-    sp.add_input("supplyWaterTemperature", node7, "supplyWaterTemperature")
-    sp.add_input("valvePosition", node6, "inputSignal")
-
-    sp.add_parameter("nominalUa.hasValue", node1, "nominalUa.hasValue")
-    sp.add_parameter("flowCoefficient", node4, "flowCoefficient")
-
-    sp.add_modeled_node(node1)
-    sp.add_modeled_node(node2)
-    sp.add_modeled_node(node3)
-    sp.add_modeled_node(node4)
-
-    return sp
-
-class CoilPumpValveFMUSystem(FMUComponent, Coil, base.Valve, base.Pump):
-    sp = [get_signature_pattern()]
-    def __init__(self,
-                m1_flow_nominal=None,
-                m2_flow_nominal=None,
-                tau1=None,
-                tau2=None,
-                tau_m=None,
-                mFlowValve_nominal=None,
-                flowCoefficient=None,
-                mFlowPump_nominal=None,
-                dpCheckValve_nominal=None,
-                dp1_nominal=None,
-                dpPump=None,
-                dpValve_nominal=None,
-                dpSystem=None,
-                tau_w_inlet=None,
-                tau_w_outlet=None,
-                tau_air_outlet=None,
-                **kwargs):
-        Coil.__init__(self, **kwargs)
-        base.Valve.__init__(self, **kwargs)
-        base.Pump.__init__(self, **kwargs)
-        self.start_time = 0
-        # fmu_filename = "coil_0wbypass_0FMUmodel_new.fmu" #3 pipes
-        fmu_filename = "coil_0wbypass_0FMUmodel.fmu"
-        self.fmu_path = os.path.join(uppath(os.path.abspath(__file__), 1), fmu_filename)
-        self.unzipdir = unzip_fmu(self.fmu_path)
-
-        self.m1_flow_nominal = m1_flow_nominal
-        self.m2_flow_nominal = m2_flow_nominal
-        self.tau1 = tau1
-        self.tau2 = tau2
-        self.tau_m = tau_m
-        self.mFlowValve_nominal = mFlowValve_nominal
-        self.flowCoefficient = flowCoefficient
-        self.mFlowPump_nominal = mFlowPump_nominal
-        self.dpCheckValve_nominal = dpCheckValve_nominal
-        self.dp1_nominal = dp1_nominal
-        self.dpPump = dpPump
-        self.dpValve_nominal = dpValve_nominal
-        self.dpSystem = dpSystem
-        self.tau_w_inlet = tau_w_inlet
-        self.tau_w_outlet = tau_w_outlet
-        self.tau_air_outlet = tau_air_outlet
-
-        self.input = {"valvePosition": None,
-                      "airFlowRate": None,
-                      "supplyWaterTemperature": None,
-                      "inletAirTemperature": None}
-        
-        self.output = {"outletWaterTemperature": None, 
-                       "outletAirTemperature": None,
-                       "inletWaterTemperature": None,
-                       "valvePosition": None}
-        
-        
-        self.FMUinputMap = {"valvePosition": "u",
-                            "airFlowRate": "inlet2.m_flow",
-                            "supplyWaterTemperature": "supplyWaterTemperature",
-                            "inletAirTemperature": "inlet2.forward.T"}
-        
-        self.FMUoutputMap = {"outletWaterTemperature": "outletWaterTemperature", 
-                            "outletAirTemperature": "outletAirTemperature",
-                            "inletWaterTemperature": "inletWaterTemperature",
-                            "valvePosition": "u"}
-        
-        self.FMUparameterMap = {"m1_flow_nominal": "m1_flow_nominal",
-                                "m2_flow_nominal": "m2_flow_nominal",
-                                "tau1": "tau1",
-                                "tau2": "tau2",
-                                "tau_m": "tau_m",
-                                "nominalUa.hasValue": "UA_nominal",
-                                "mFlowValve_nominal": "mFlowValve_nominal",
-                                "flowCoefficient": "Kv",
-                                "mFlowPump_nominal": "mFlowPump_nominal",
-                                "dpCheckValve_nominal": "dpCheckValve_nominal",
-                                "dp1_nominal": "dp1_nominal",
-                                "dpPump": "dpPump",
-                                "dpSystem": "dpSystem",
-                                "tau_w_inlet": "tau_w_inlet",
-                                "tau_w_outlet": "tau_w_outlet",
-                                "tau_air_outlet": "tau_air_outlet"}
-        
-        self.input_unit_conversion = {"valvePosition": do_nothing,
-                                      "airFlowRate": regularize(0.01),
-                                      "supplyWaterTemperature": to_degK_from_degC,
-                                      "inletAirTemperature": to_degK_from_degC}
-        
-        self.output_unit_conversion = {"outletWaterTemperature": to_degC_from_degK,
-                                      "outletAirTemperature": to_degC_from_degK,
-                                      "inletWaterTemperature": to_degC_from_degK,
-                                      "valvePosition": do_nothing}
-
-        self.INITIALIZED = False
-        self._config = {"parameters": list(self.FMUparameterMap.keys())}
-
-    @property
-    def config(self):
-        return self._config
-
-    def cache(self,
-            startTime=None,
-            endTime=None,
-            stepSize=None):
-        pass
-
-    def initialize(self,
-                    startTime=None,
-                    endTime=None,
-                    stepSize=None):
-        '''
-            This function initializes the FMU component by setting the start_time and fmu_filename attributes, 
-            and then sets the parameters for the FMU model.
-        '''
-        if self.INITIALIZED:
-            self.reset()
-        else:
-            self.initialize_fmu()
-            self.INITIALIZED = True
-
-
-        
\ No newline at end of file
Index: twin4build/saref4bldg/physical_object/building_object/building_device/distribution_device/distribution_flow_device/energy_conversion_device/air_to_air_heat_recovery/tests/Dynamic_air_to_air_heat_recovery_calibration.py
===================================================================
diff --git a/twin4build/saref4bldg/physical_object/building_object/building_device/distribution_device/distribution_flow_device/energy_conversion_device/air_to_air_heat_recovery/tests/Dynamic_air_to_air_heat_recovery_calibration.py b/twin4build/saref4bldg/physical_object/building_object/building_device/distribution_device/distribution_flow_device/energy_conversion_device/air_to_air_heat_recovery/tests/Dynamic_air_to_air_heat_recovery_calibration.py
deleted file mode 100644
--- a/twin4build/saref4bldg/physical_object/building_object/building_device/distribution_device/distribution_flow_device/energy_conversion_device/air_to_air_heat_recovery/tests/Dynamic_air_to_air_heat_recovery_calibration.py	(revision 5e9d98597fa20ff51db5017f1c122d049fc13c8b)
+++ /dev/null	(revision 5e9d98597fa20ff51db5017f1c122d049fc13c8b)
@@ -1,202 +0,0 @@
-import os
-import sys
-import datetime
-from dateutil.tz import tzutc
-import pandas as pd
-import matplotlib.pyplot as plt
-import json
-import numpy as np
-
-###Only for testing before distributing package
-if __name__ == '__main__':
-    uppath = lambda _path,n: os.sep.join(_path.split(os.sep)[:-n])
-    #change the number here according to your requirement
-    #desired path looks like this "D:\Projects\Twin4Build
-    file_path = uppath(os.path.abspath(__file__), 11)
-    #file_path = uppath(os.path.abspath(__file__), 9)
-    sys.path.append(file_path)
-
-    calibrated_path = file_path+"/calibrated_folder"
-    if not os.path.exists(calibrated_path):
-         os.makedirs(calibrated_path)
-
-
-
-from twin4build.utils.data_loaders.load_spreadsheet import load_spreadsheet
-from twin4build.utils.preprocessing.data_collection import DataCollection
-from twin4build.utils.preprocessing.data_sampler import data_sampler
-from twin4build.saref4bldg.physical_object.building_object.building_device.distribution_device.distribution_flow_device.energy_conversion_device.air_to_air_heat_recovery.air_to_air_heat_recovery_system import AirToAirHeatRecoverySystem
-from twin4build.saref.measurement.measurement import Measurement
-#import pwlf
-
-
-from twin4build.logger.Logging import Logging
-
-logger = Logging.get_logger("ai_logfile")
-
-class dynamic_calibration_heat_recovery:
-    '''
-        initializes the class with input and output data, 
-        sets the parameters for an AirToAirHeatRecoverySystem, and calls the save_plots() method.
-    '''
-    def __init__(self,input_X,output_Y):
-        self.input_data  = input_X
-        self.output_data = output_Y
-        self.model_set_parameters()
-        #self.data_prep_method()
-        self.save_plots()
-
-        logger.info("[Dynamic Calibration Heat Recovery Class] : Entered in Initialise Function")
-
-    def model_set_parameters(self):
-        '''
-             creates an AirToAirHeatRecoverySystem object with specific parameter values.
-        '''
-        self.air_to_air_heat_recovery = AirToAirHeatRecoverySystem(
-                specificHeatCapacityAir = Measurement(hasValue=1000),
-                eps_75_h = 0.8,
-                eps_75_c = 0.8,
-                eps_100_h = 0.8,
-                eps_100_c = 0.8,
-                primaryAirFlowRateMax = Measurement(hasValue=25000/3600*1.225),
-                secondaryAirFlowRateMax = Measurement(hasValue=25000/3600*1.225),
-                subSystemOf = [],
-                input = {},
-                output = {},
-                savedInput = {},
-                savedOutput = {},
-                saveSimulationResult = True,
-                connectedThrough = [],
-                connectsAt = [],
-                id = "AirToAirHeatRecovery")
-
-    def save_plots(self):
-        # These lines are specific to this code. Please change if required
-        #input_plot = self.input_data.iloc[20000:21000,:].reset_index(drop=True)
-        #output_plot = self.input_plot["primaryTemperatureOut"].to_numpy()
-
-        logger.info("[Dynamic Calibration Heat Recovery Class] : Entered in Save Plots Function")
-
-
-        input_plot = self.input_data
-        output_plot =self.output_data
-
-        start_pred = self.air_to_air_heat_recovery.do_period(input_plot) ####
-        fig, ax = plt.subplots(2)
-        ax[0].plot(start_pred, color="black", linestyle="dashed", label="predicted")
-        ax[0].plot(output_plot, color="blue", label="Measured")
-        ax[0].set_title('Before calibration')
-        fig.legend()
-        self.input_data.set_index("time")
-        self.input_data.plot(subplots=True)
-        end_pred = self.air_to_air_heat_recovery.do_period(input_plot)
-        ax[1].plot(end_pred, color="black", linestyle="dashed", label="predicted")
-        ax[1].plot(output_plot, color="blue", label="Measured")
-        ax[1].set_title('After calibration')
-        for a in ax:
-            a.set_ylim([18,22])
-
-        plt.show()
-
-        logger.info("[Dynamic Calibration Heat Recovery Class] : Exited from Save Plots Function")
-
-
-    def calibrate_results(self):
-        return(self.air_to_air_heat_recovery.calibrate(self.input_data, self.output_data))
-
-def read_data():
-    '''
-        This is a Python function that reads data from several CSV files using a custom function 
-        "load_spreadsheet" with a defined file path, time range, and date format. 
-        The data is loaded into pandas DataFrames and then processed, including conversions
-        from imperial to metric units. Finally, the processed data is inserted into a pandas DataFrame called "input" 
-        that is returned as output from the function. The primaryTemperatureIn column of "input" is calculated as a function of other columns.
-    '''
-
-    logger.info("[Dynamic Calibration Heat Recovery Class] : Entered in Read Data Function")
-
-
-    input = pd.DataFrame()
-
-    stepSize = 600
-    startTime = datetime.datetime(year=2021, month=10, day=1, hour=0, minute=0, second=0, tzinfo=tzutc()) 
-    endTime = datetime.datetime(year=2023, month=1, day=1, hour=0, minute=0, second=0, tzinfo=tzutc())
-    format = "%m/%d/%Y %I:%M:%S %p"
-
-    filename = os.path.join(os.path.abspath(uppath(os.path.abspath(__file__), 10)), "test", "data", "time_series_data", "weather_BMS.csv")
-    weather = load_spreadsheet(filename=filename, stepSize=stepSize, start_time=startTime, end_time=endTime, format=format, dt_limit=9999)
-    temp = weather.copy()
-    # weather["outdoorTemperature"] = (weather["outdoorTemperature"]-32)*5/9 #convert from fahrenheit to celcius
-
-    filename = os.path.join(os.path.abspath(uppath(os.path.abspath(__file__), 10)), "test", "data", "time_series_data", "VE02_efficiency.csv")
-    VE02_efficiency = load_spreadsheet(filename=filename, stepSize=stepSize, start_time=startTime, end_time=endTime, format=format, dt_limit=9999)
-
-    filename = os.path.join(os.path.abspath(uppath(os.path.abspath(__file__), 10)), "test", "data", "time_series_data", "VE02_airflowrate_supply_kg_s.csv")
-    VE02_primaryAirFlowRate = load_spreadsheet(filename=filename, stepSize=stepSize, start_time=startTime, end_time=endTime, format=format, dt_limit=9999)
-    # VE02_primaryAirFlowRate["primaryAirFlowRate"] = VE02_primaryAirFlowRate["primaryAirFlowRate"]*0.0283168466/60*1.225 #convert from cubic feet per minute to kg/s
-
-    filename = os.path.join(os.path.abspath(uppath(os.path.abspath(__file__), 10)), "test", "data", "time_series_data", "VE02_airflowrate_return_kg_s.csv")
-    VE02_secondaryAirFlowRate = load_spreadsheet(filename=filename, stepSize=stepSize, start_time=startTime, end_time=endTime, format=format, dt_limit=9999)
-    # VE02_secondaryAirFlowRate["secondaryAirFlowRate"] = VE02_secondaryAirFlowRate["secondaryAirFlowRate"]*0.0283168466/60*1.225 #convert from cubic feet per minute to kg/s
-
-    filename = os.path.join(os.path.abspath(uppath(os.path.abspath(__file__), 10)), "test", "data", "time_series_data", "VE02_FTU1.csv")
-    VE02_FTU1 = load_spreadsheet(filename=filename, stepSize=stepSize, start_time=startTime, end_time=endTime, format=format, dt_limit=9999)
-    # VE02_FTU1["FTU1"] = (VE02_FTU1["FTU1"]-32)*5/9 #convert from fahrenheit to celcius
-
-    filename = os.path.join(os.path.abspath(uppath(os.path.abspath(__file__), 10)), "test", "data", "time_series_data", "VE02_FTG_MIDDEL.csv")
-    VE02_FTG_MIDDEL = load_spreadsheet(filename=filename, stepSize=stepSize, start_time=startTime, end_time=endTime, format=format, dt_limit=9999)
-    # VE02_FTG_MIDDEL["FTG_MIDDEL"] = (VE02_FTG_MIDDEL["FTG_MIDDEL"]-32)*5/9 #convert from fahrenheit to celcius
-
-    filename = os.path.join(os.path.abspath(uppath(os.path.abspath(__file__), 10)), "test", "data", "time_series_data", "VE02_FTI_KALK_SV.csv")
-    VE02_FTI_KALK_SV = load_spreadsheet(filename=filename, stepSize=stepSize, start_time=startTime, end_time=endTime, format=format, dt_limit=9999)
-    # VE02_FTI_KALK_SV["FTI_KALK_SV"] = (VE02_FTI_KALK_SV["FTI_KALK_SV"]-32)*5/9 #convert from fahrenheit to celcius
-
-    
-    
-    # primaryTemperatureIn can be calculated based on logged efficiency and temperature measurements.
-    # However, primaryTemperatureIn should also be equal to outdoor temperature, which is available.
-    # Outdoor temperature is therefore currently used. 
-    primaryTemperatureIn = (VE02_efficiency["efficiency"]/100*VE02_FTU1["FTU1"]-VE02_FTG_MIDDEL["FTG_MIDDEL"])/(VE02_efficiency["efficiency"]/100-1)
-
-
-
-
-    input.insert(0, "time", VE02_FTI_KALK_SV["Time stamp"])
-    input.insert(0, "primaryAirFlowRate", VE02_primaryAirFlowRate["primaryAirFlowRate"])
-    input.insert(0, "secondaryAirFlowRate", VE02_secondaryAirFlowRate["secondaryAirFlowRate"])
-    # input.insert(0, "primaryTemperatureIn", primaryTemperatureIn)
-    input.insert(0, "primaryTemperatureIn", weather["outdoorTemperature"])
-    input.insert(0, "secondaryTemperatureIn", VE02_FTU1["FTU1"])
-    input.insert(0, "primaryTemperatureOutSetpoint", VE02_FTI_KALK_SV["FTI_KALK_SV"])
-    input.insert(0, "primaryTemperatureOut", VE02_FTG_MIDDEL["FTG_MIDDEL"])
-
-
-    tol = 1e-5
-    
-    input.replace([np.inf, -np.inf], np.nan, inplace=True)
-    input = (input.loc[(input["primaryAirFlowRate"]>tol) | (input["secondaryAirFlowRate"]>tol)]).dropna().reset_index(drop=True) # Filter data to remove 0 airflow data
-    output = input["primaryTemperatureOut"].to_numpy()
-    input.drop(columns=["primaryTemperatureOut"])
-
-    logger.info("[Dynamic Calibration Heat Recovery Class] : Exited from Read Data Function")
-
-
-    return (input,output)
-
-if __name__ == '__main__':
-    #use id as used into id = "AirToAirHeatRecovery"
-    AirToAirHeatRecovery_units = {"AirToAirHeatRecovery_1":
-                                {"input_filename":"",
-                                "output_filename" :""
-                                },
-                            }
-    calibrated_variable_dict = {}
-
-    for AirToAirHeatRecovery_unit in AirToAirHeatRecovery_units.keys():
-        input_X,output_Y = read_data()
-        air_to_heat_recovery_cls_obj = dynamic_calibration_heat_recovery(input_X,output_Y)
-        calibrated_variable_dict[AirToAirHeatRecovery_unit] = air_to_heat_recovery_cls_obj.calibrate_results()
-
-    calibrated_full_path = calibrated_path+"/calibrated_air_to_heat_recovery_parameters.json"
-    with open(calibrated_full_path, "w") as outfile:
-        json.dump(calibrated_variable_dict, outfile)
\ No newline at end of file
